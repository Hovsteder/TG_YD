import { Bot, session, GrammyError, HttpError } from "grammy";
import { storage } from "./storage";
import crypto from "crypto";

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function getBotToken(): Promise<string> {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    const storedToken = await storage.getSettingValue("telegram_bot_token");
    
    if (storedToken) {
      return storedToken;
    }
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.TELEGRAM_BOT_TOKEN) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await storage.upsertSetting(
        "telegram_bot_token", 
        process.env.TELEGRAM_BOT_TOKEN, 
        "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
      );
      return process.env.TELEGRAM_BOT_TOKEN;
    }
    
    throw new Error("TELEGRAM_BOT_TOKEN not found in settings or environment variables");
  } catch (error) {
    console.error("Error getting bot token:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
export async function updateBotToken(newToken: string): Promise<boolean> {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await storage.upsertSetting(
      "telegram_bot_token", 
      newToken, 
      "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    botInstance = null;
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try {
      await getBotInstance();
      return true;
    } catch (error) {
      console.error("Error initializing bot with new token:", error);
      return false;
    }
  } catch (error) {
    console.error("Error updating bot token:", error);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
let botInstance: Bot | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
async function getBotInstance(): Promise<Bot> {
  if (!botInstance) {
    const token = await getBotToken();
    botInstance = new Bot(token);
  }
  return botInstance;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö 2FA –∫–æ–¥–æ–≤
type TwoFAData = {
  code: string;
  expiresAt: Date;
  attempts: number;
};

const twoFAStore: Record<string, TwoFAData> = {};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 2FA –∫–æ–¥–∞
export async function generateTwoFACode(telegramId: string): Promise<string> {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 5-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
  const code = Math.floor(10000 + Math.random() * 90000).toString();
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 5 –º–∏–Ω—É—Ç
  const expiresAt = new Date(Date.now() + 5 * 60 * 1000);
  twoFAStore[telegramId] = { code, expiresAt, attempts: 0 };
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const botInstance = await getBotInstance();
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
    await botInstance.api.sendMessage(telegramId, `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.`);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await storage.getUserByTelegramId(telegramId);
    if (user) {
      await storage.updateUser(user.id, { twoFaCode: code });
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      await storage.createLog({
        userId: user.id,
        action: "2fa_code_sent",
        details: { telegram_id: telegramId },
        ipAddress: null
      });
    }
    
    return code;
  } catch (error) {
    console.error("Error sending 2FA code:", error);
    if (error instanceof GrammyError) {
      console.error("Error in Telegram API:", error.description);
    } else if (error instanceof HttpError) {
      console.error("HTTP error:", error);
    }
    throw new Error("Failed to send 2FA code");
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
export function verifyTwoFACode(telegramId: string, code: string): boolean {
  const twoFAData = twoFAStore[telegramId];
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫
  if (!twoFAData || new Date() > twoFAData.expiresAt) {
    return false;
  }
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
  twoFAData.attempts += 1;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
  const isValid = twoFAData.code === code;
  
  // –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  if (isValid || twoFAData.attempts >= 5) {
    delete twoFAStore[telegramId];
  }
  
  return isValid;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
export async function getTelegramUserData(telegramId: string) {
  try {
    const botInstance = await getBotInstance();
    const user = await botInstance.api.getChat(telegramId);
    return user;
  } catch (error) {
    console.error("Error getting user data:", error);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserChats(telegramId: string, limit = 5) {
  try {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram API
    // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MTProto API –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
    
    // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ MTProto API
    throw new Error("This functionality requires Telegram MTProto API implementation");
  } catch (error) {
    console.error("Error getting user chats:", error);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export async function validateTelegramAuth(authData: any): Promise<boolean> {
  const { id, first_name, username, photo_url, auth_date, hash } = authData;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!id || !auth_date || !hash) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ auth_date –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
  const currentTime = Math.floor(Date.now() / 1000);
  if (currentTime - parseInt(auth_date) > 86400) {
    return false;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const botToken = await getBotToken();
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–∞
    const data_check_arr = [];
    for (const key in authData) {
      if (key !== 'hash') {
        data_check_arr.push(`${key}=${authData[key]}`);
      }
    }
    data_check_arr.sort();
    const data_check_string = data_check_arr.join('\n');
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    const secret = crypto.createHash('sha256')
      .update(botToken)
      .digest();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º
    const hash_check = crypto.createHmac('sha256', secret)
      .update(data_check_string)
      .digest('hex');
    
    return hash === hash_check;
  } catch (error) {
    console.error("Error validating Telegram auth:", error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export async function sendNewUserNotification(
  adminChatId: string, 
  userData: { id: number, telegramId: string, username?: string, firstName?: string, lastName?: string }
): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationsEnabled = await storage.getSettingValue("notifications_enabled");
    
    // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (notificationsEnabled !== "true") {
      return true;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const userFullname = userData.firstName 
      ? `${userData.firstName}${userData.lastName ? ' ' + userData.lastName : ''}`
      : '–ù–µ—Ç –∏–º–µ–Ω–∏';
      
    const username = userData.username ? `@${userData.username}` : '–Ω–µ—Ç username';
    
    const message = `üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!*\n\n`
      + `üë§ –ò–º—è: ${userFullname}\n`
      + `üÜî ID: \`${userData.telegramId}\`\n`
      + `üë§ Username: ${username}\n`
      + `üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n`
      + `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await storage.countUsers()}`;
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const botInstance = await getBotInstance();
    await botInstance.api.sendMessage(adminChatId, message, { parse_mode: "Markdown" });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await storage.createLog({
      userId: userData.id,
      action: "admin_notification_sent",
      details: { telegramId: userData.telegramId, adminChatId },
      ipAddress: null
    });
    
    return true;
  } catch (error) {
    console.error("Error sending admin notification:", error);
    if (error instanceof GrammyError) {
      console.error("Error in Telegram API:", error.description);
    } else if (error instanceof HttpError) {
      console.error("HTTP error:", error);
    }
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function sendTestNotification(adminChatId: string): Promise<boolean> {
  try {
    const message = `üîî *–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n`
      + `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n`
      + `–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n`
      + `üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const botInstance = await getBotInstance();
    await botInstance.api.sendMessage(adminChatId, message, { parse_mode: "Markdown" });
    
    return true;
  } catch (error) {
    console.error("Error sending test notification:", error);
    if (error instanceof GrammyError) {
      console.error("Error in Telegram API:", error.description);
    } else if (error instanceof HttpError) {
      console.error("HTTP error:", error);
    }
    return false;
  }
}

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
// –í –±—É–¥—É—â–µ–º —ç—Ç–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω
export default {
  api: {
    sendMessage: async (chatId: string, text: string, options?: any) => {
      const botInstance = await getBotInstance();
      return botInstance.api.sendMessage(chatId, text, options);
    },
    getChat: async (chatId: string) => {
      const botInstance = await getBotInstance();
      return botInstance.api.getChat(chatId);
    }
  }
};
