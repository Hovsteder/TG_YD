import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { validateTelegramAuth, generateTwoFACode, verifyTwoFACode, getUserChats } from "./telegram";
import { generateVerificationCode, verifyCode, sendVerificationTelegram } from "./phone-auth";
// import { sendAuthCode, verifyAuthCode, signUpNewUser, check2FAPassword, logoutTelegramUser, initTelegramAuth } from "./telegram-auth";
import { 
  sendAuthCode, 
  verifyAuthCode, 
  signUpNewUser, 
  check2FAPassword, 
  logoutTelegramUser, 
  initTelegramAuth,
  createQRLoginCode,
  checkQRLoginStatus
} from "./telegram-gram";
import { z } from "zod";
import { randomBytes, scrypt, timingSafeEqual } from "crypto";
import { promisify } from "util";
import session from "express-session";
import { insertUserSchema, insertSessionSchema, messages, sessions, chats } from "@shared/schema";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { db } from "./db";
import { eq, count } from "drizzle-orm";



// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
const scryptAsync = promisify(scrypt);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function hashPassword(password: string): Promise<string> {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
async function comparePasswords(supplied: string, stored: string): Promise<boolean> {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const telegramAuthSchema = z.object({
  id: z.string(),
  first_name: z.string(),
  username: z.string().optional(),
  photo_url: z.string().optional(),
  auth_date: z.string(),
  hash: z.string()
});

const twoFACodeSchema = z.object({
  code: z.string().length(5) // –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Å–∏–º–≤–æ–ª–æ–≤
});

// –°—Ö–µ–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
const requestPhoneCodeSchema = z.object({
  phoneNumber: z.string().min(10).max(15) // –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +1234567890
});

// –°—Ö–µ–º–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
const verifyPhoneCodeSchema = z.object({
  phoneNumber: z.string().min(10).max(15),
  code: z.string().length(5) // –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5 —Å–∏–º–≤–æ–ª–æ–≤
});

// –°—Ö–µ–º–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è
const setPasswordSchema = z.object({
  phoneNumber: z.string().min(10).max(15),
  password: z.string().min(8).max(100),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().email().optional()
});

// –°—Ö–µ–º–∞ –¥–ª—è –ª–æ–≥–∏–Ω–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/–ø–∞—Ä–æ–ª—é
const phoneLoginSchema = z.object({
  phoneNumber: z.string().min(10).max(15),
  password: z.string().min(1)
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR-–∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const qrTokenSchema = z.object({
  token: z.string().min(1)
});

export async function registerRoutes(app: Express): Promise<Server> {
  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  app.get('/api/health', (req, res) => {
    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
  app.use(session({
    secret: process.env.SESSION_SECRET || randomBytes(32).toString('hex'),
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === 'production',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 1 –Ω–µ–¥–µ–ª—è
    }
  }));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Passport
  app.use(passport.initialize());
  app.use(passport.session());

  // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  passport.serializeUser((user: any, done) => {
    done(null, user.id);
  });

  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (err) {
      done(err);
    }
  });

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const isAuthenticated = (req: Request, res: Response, next: any) => {
    if (req.isAuthenticated()) {
      return next();
    }
    res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  };

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = (req: Request, res: Response, next: any) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Admin-Authorization
    const adminToken = req.headers['admin-authorization'] as string;
    
    if (adminToken) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      storage.getSession(adminToken)
        .then(session => {
          if (session) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
            return storage.getUser(session.userId);
          }
          return null;
        })
        .then(user => {
          if (user && user.isAdmin) {
            (req as any).adminUser = user;
            next();
          } else {
            res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
          }
        })
        .catch(err => {
          console.error('Admin auth error:', err);
          res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
        });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
    if (req.isAuthenticated() && req.user && (req.user as any).isAdmin) {
      return next();
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    // return next();
    
    res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
  };

  // API –º–∞—Ä—à—Ä—É—Ç—ã
  // 1. Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  app.post('/api/auth/telegram', async (req, res) => {
    try {
      const authData = telegramAuthSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
      const isValid = await validateTelegramAuth(authData);
      if (!isValid) {
        return res.status(400).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
      }

      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
      let user = await storage.getUserByTelegramId(authData.id);
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
          telegramId: authData.id,
          firstName: authData.first_name,
          username: authData.username || null,
          avatarUrl: authData.photo_url || null,
          lastLogin: new Date()
        };

        user = await storage.createUser(newUser);
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await storage.createLog({
          userId: user.id,
          action: 'user_registered',
          details: { telegram_id: authData.id },
          ipAddress: req.ip
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try {
          const adminChatId = await storage.getSettingValue("admin_chat_id");
          const notificationsEnabled = await storage.getSettingValue("notifications_enabled");
          
          if (notificationsEnabled === "true" && adminChatId && user.telegramId) {
            const { sendNewUserNotification } = await import('./telegram');
            await sendNewUserNotification(adminChatId, {
              id: user.id,
              telegramId: user.telegramId,
              username: user.username || undefined,
              firstName: user.firstName || undefined,
              lastName: user.lastName || undefined
            });
          } else if (notificationsEnabled === "true" && adminChatId) {
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegramId, –Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const { getBotInstance } = await import('./telegram');
            const botInstance = await getBotInstance();
            const message = `üîî *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è*\n\n`
              + `üë§ –ò–º—è: ${user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${user.lastName || ''}\n`
              + `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`
              + `‚úâÔ∏è Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`
              + `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await storage.countUsers()}`;
            
            await botInstance.api.sendMessage(adminChatId, message, { parse_mode: "Markdown" });
          }
        } catch (notificationError) {
          console.error("Failed to send admin notification:", notificationError);
          // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        }
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await storage.updateUser(user.id, {
          firstName: authData.first_name,
          username: authData.username || user.username,
          avatarUrl: authData.photo_url || user.avatarUrl,
          lastLogin: new Date()
        }) || user;
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –≤—Ö–æ–¥–µ
        await storage.createLog({
          userId: user.id,
          action: 'user_login',
          details: { telegram_id: authData.id },
          ipAddress: req.ip
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2FA –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await generateTwoFACode(authData.id);

      res.json({
        success: true,
        telegramId: authData.id,
        requireTwoFA: true
      });
    } catch (error) {
      console.error('Auth error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }
  });

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
  app.post('/api/auth/verify-2fa', async (req, res) => {
    try {
      const { telegramId, code } = req.body;
      
      if (!telegramId || !code) {
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
      const isValid = verifyTwoFACode(telegramId, code);
      
      if (!isValid) {
        return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è' });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionToken = randomBytes(32).toString('hex');
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
      
      await storage.createSession({
        userId: user.id,
        sessionToken,
        ipAddress: req.ip || null,
        userAgent: req.headers['user-agent'] || null,
        expiresAt
      });

      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      req.login(user, (err) => {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ 2FA
        storage.createLog({
          userId: user.id,
          action: '2fa_verified',
          details: { telegram_id: telegramId },
          ipAddress: req.ip
        });

        res.json({
          success: true,
          user: {
            id: user.id,
            telegramId: user.telegramId,
            username: user.username,
            firstName: user.firstName,
            lastName: user.lastName,
            avatarUrl: user.avatarUrl,
            isAdmin: user.isAdmin
          },
          sessionToken
        });
      });
    } catch (error) {
      console.error('2FA verification error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞' });
    }
  });

  // 3. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ 2FA –∫–æ–¥–∞
  app.post('/api/auth/resend-2fa', async (req, res) => {
    try {
      const { telegramId } = req.body;
      
      if (!telegramId) {
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
      await generateTwoFACode(telegramId);

      res.json({
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'
      });
    } catch (error) {
      console.error('Resend 2FA error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' });
    }
  });

  // === –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û –¢–ï–õ–ï–§–û–ù–£ –ß–ï–†–ï–ó API TELEGRAM ===

  // 1. –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  app.post('/api/auth/phone/request-code', async (req, res) => {
    try {
      const { phoneNumber } = requestPhoneCodeSchema.parse(req.body);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram API
      const result = await sendAuthCode(phoneNumber);
      
      if (!result.success) {
        return res.status(500).json({ 
          success: false,
          message: result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥' 
        });
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
      await storage.createLog({
        userId: null,
        action: 'phone_code_requested',
        details: { phoneNumber },
        ipAddress: req.ip
      });
      
      const responseMsg = {
        success: true,
        message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram',
        phoneCodeHash: result.phoneCodeHash,
        expiresIn: result.timeout || 600, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç
        codeDeliveryType: 'app' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (result.codeType) {
        responseMsg.codeDeliveryType = result.codeType;
      }
      
      res.json(responseMsg);
    } catch (error) {
      console.error('Phone code request error:', error);
      res.status(500).json({ 
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' 
      });
    }
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post('/api/auth/phone/verify-code', async (req, res) => {
    try {
      const { phoneNumber, code } = verifyPhoneCodeSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram API
      const verifyResult = await verifyAuthCode(phoneNumber, code);
      
      if (!verifyResult.success) {
        return res.status(400).json({ 
          success: false, 
          message: verifyResult.error || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è' 
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (verifyResult.requireSignUp) {
        return res.json({
          success: true,
          requireSignUp: true,
          phoneNumber,
          phoneCodeHash: verifyResult.phoneCodeHash
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA
      if (verifyResult.require2FA) {
        return res.json({
          success: true,
          require2FA: true,
          phoneNumber,
          phoneCodeHash: verifyResult.phoneCodeHash
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
      let user = await storage.getUserByPhoneNumber(phoneNumber);
      
      if (user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        user = await storage.updateUser(user.id, {
          isVerified: true,
          verificationCode: null,
          verificationCodeExpires: null,
          lastLogin: new Date()
        }) || user;
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –≤—Ö–æ–¥–µ
        await storage.createLog({
          userId: user.id,
          action: 'user_login',
          details: { phoneNumber },
          ipAddress: req.ip
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å
        if (!user.password) {
          return res.json({
            success: true,
            requirePassword: true,
            isNewUser: false,
            phoneNumber
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const sessionToken = randomBytes(32).toString('hex');
        const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
        
        await storage.createSession({
          userId: user.id,
          sessionToken,
          ipAddress: req.ip || null,
          userAgent: req.headers['user-agent'] || null,
          expiresAt
        });
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        req.login(user, (err) => {
          if (err) {
            return res.status(500).json({ 
              success: false,
              message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
            });
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
          return res.json({
            success: true,
            user: {
              id: user?.id,
              phoneNumber: user?.phoneNumber,
              username: user?.username,
              firstName: user?.firstName,
              lastName: user?.lastName,
              isAdmin: user?.isAdmin
            },
            sessionToken
          });
        });
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
        const telegramUser = verifyResult.user;
        
        if (!telegramUser) {
          return res.status(500).json({ 
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await storage.createUser({
          phoneNumber,
          firstName: telegramUser.firstName || null,
          lastName: telegramUser.lastName || null,
          username: telegramUser.username || null,
          isVerified: true,
          verificationCode: null,
          verificationCodeExpires: null,
          lastLogin: new Date()
        });
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await storage.createLog({
          userId: user.id,
          action: 'user_registered',
          details: { phoneNumber },
          ipAddress: req.ip
        });
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
        return res.json({
          success: true,
          requirePassword: true,
          isNewUser: true,
          phoneNumber
        });
      }
    } catch (error) {
      console.error('Phone code verification error:', error);
      res.status(500).json({ 
        success: false,
        message: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞' 
      });
    }
  });
  
  // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  app.post('/api/auth/phone/set-password', async (req, res) => {
    try {
      const { phoneNumber, password, firstName, lastName, email } = setPasswordSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await storage.getUserByPhoneNumber(phoneNumber);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = await hashPassword(password);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await storage.updateUser(user.id, {
        password: hashedPassword,
        firstName: firstName || user.firstName,
        lastName: lastName || user.lastName,
        email: email || user.email,
        lastLogin: new Date()
      }) || user;
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionToken = randomBytes(32).toString('hex');
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
      
      await storage.createSession({
        userId: user.id,
        sessionToken,
        ipAddress: req.ip || null,
        userAgent: req.headers['user-agent'] || null,
        expiresAt
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      req.login(user, (err) => {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è
        storage.createLog({
          userId: user.id,
          action: 'password_set',
          details: { phoneNumber },
          ipAddress: req.ip
        });
        
        res.json({
          success: true,
          user: {
            id: user.id,
            phoneNumber: user.phoneNumber,
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            isAdmin: user.isAdmin
          },
          sessionToken
        });
      });
    } catch (error) {
      console.error('Set password error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è' });
    }
  });
  
  // 4. –í—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –ø–∞—Ä–æ–ª—é
  app.post('/api/auth/phone/login', async (req, res) => {
    try {
      const { phoneNumber, password } = phoneLoginSchema.parse(req.body);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const user = await storage.getUserByPhoneNumber(phoneNumber);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      if (!user.password) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const passwordValid = await comparePasswords(password, user.password);
      
      if (!passwordValid) {
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞
        await storage.createLog({
          userId: user.id,
          action: 'login_failed',
          details: { phoneNumber, reason: 'invalid_password' },
          ipAddress: req.ip
        });
        
        return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
      await storage.updateUser(user.id, {
        lastLogin: new Date()
      });
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionToken = randomBytes(32).toString('hex');
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
      
      await storage.createSession({
        userId: user.id,
        sessionToken,
        ipAddress: req.ip || null,
        userAgent: req.headers['user-agent'] || null,
        expiresAt
      });
      
      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      req.login(user, (err) => {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
        }
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –≤—Ö–æ–¥–µ
        storage.createLog({
          userId: user.id,
          action: 'user_login',
          details: { phoneNumber },
          ipAddress: req.ip
        });
        
        res.json({
          success: true,
          user: {
            id: user.id,
            phoneNumber: user.phoneNumber,
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            isAdmin: user.isAdmin
          },
          sessionToken
        });
      });
    } catch (error) {
      console.error('Phone login error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É' });
    }
  });

  // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/user', isAuthenticated, async (req, res) => {
    const user = req.user as any;
    
    res.json({
      id: user.id,
      telegramId: user.telegramId,
      phoneNumber: user.phoneNumber,
      email: user.email,
      username: user.username,
      firstName: user.firstName,
      lastName: user.lastName,
      avatarUrl: user.avatarUrl,
      isAdmin: user.isAdmin,
      isVerified: user.isVerified
    });
  });

  // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/chats', isAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      let chats = await storage.listUserChats(user.id);
      let needsUpdate = false;
      
      // –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 5, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (chats.length < 5) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —á–µ—Ä–µ–∑ MTProto API
          const { getUserDialogs } = require('./telegram-auth');
          const dialogsResult = await getUserDialogs(5);
          
          if (dialogsResult.success) {
            console.log(`Retrieved ${dialogsResult.dialogs.length} dialogs from Telegram API`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            const savedChats = [];
            
            for (const dialog of dialogsResult.dialogs) {
              // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              let chatInfo = null;
              let chatId = '';
              let chatType = '';
              let chatTitle = '';
              let chatPhoto = '';
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ (–ª–∏—á–Ω—ã–π —á–∞—Ç, –≥—Ä—É–ø–ø–∞, –∫–∞–Ω–∞–ª)
              if (dialog.peer._ === 'peerUser') {
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
                const userId = dialog.peer.user_id;
                const userObj = dialogsResult.users.find((u: any) => u.id === userId);
                
                if (userObj) {
                  chatId = `user_${userId}`;
                  chatType = 'private';
                  chatTitle = `${userObj.first_name || ''} ${userObj.last_name || ''}`.trim();
                  chatPhoto = userObj.photo ? `user_${userId}_photo` : ''; // –ó–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
                }
              } else if (dialog.peer._ === 'peerChat') {
                // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –ø–æ ID
                const chatPeerId = dialog.peer.chat_id;
                const chatObj = dialogsResult.chats.find((c: any) => c.id === chatPeerId);
                
                if (chatObj) {
                  chatId = `chat_${chatPeerId}`;
                  chatType = 'group';
                  chatTitle = chatObj.title || '';
                  chatPhoto = chatObj.photo ? `chat_${chatPeerId}_photo` : '';
                }
              } else if (dialog.peer._ === 'peerChannel') {
                // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –ø–æ ID
                const channelId = dialog.peer.channel_id;
                const channelObj = dialogsResult.chats.find((c: any) => c.id === channelId);
                
                if (channelObj) {
                  chatId = `channel_${channelId}`;
                  chatType = 'channel';
                  chatTitle = channelObj.title || '';
                  chatPhoto = channelObj.photo ? `channel_${channelId}_photo` : '';
                }
              }
              
              // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              let lastMessage = null;
              if (dialog.top_message) {
                const message = dialogsResult.messages.find((m: any) => m.id === dialog.top_message);
                if (message) {
                  lastMessage = {
                    id: message.id,
                    text: message.message || '',
                    date: new Date(message.date * 1000)
                  };
                }
              }
              
              // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
              if (chatId && chatTitle) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–∞–∑–µ
                let existingChat = await storage.getChatByIds(user.id, chatId);
                
                if (existingChat) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
                  existingChat = await storage.updateChat(existingChat.id, {
                    title: chatTitle,
                    lastMessageDate: lastMessage ? lastMessage.date : existingChat.lastMessageDate,
                    lastMessageText: lastMessage ? lastMessage.text : existingChat.lastMessageText,
                    photoUrl: chatPhoto || existingChat.photoUrl
                  });
                  savedChats.push(existingChat);
                } else {
                  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                  const newChat = await storage.createChat({
                    userId: user.id,
                    chatId: chatId,
                    type: chatType,
                    title: chatTitle,
                    lastMessageDate: lastMessage ? lastMessage.date : new Date(),
                    lastMessageText: lastMessage ? lastMessage.text : '',
                    unreadCount: dialog.unread_count || 0,
                    photoUrl: chatPhoto
                  });
                  savedChats.push(newChat);
                }
              }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats = await storage.listUserChats(user.id);
            needsUpdate = true;
          } else {
            console.error('Error from Telegram API:', dialogsResult.error);
          }
        } catch (error) {
          console.error('Error fetching chats from Telegram:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ—é—â–∏–µ—Å—è —á–∞—Ç—ã
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–æ–≤
      await storage.createLog({
        userId: user.id,
        action: 'fetch_chats',
        details: { count: chats.length, updated: needsUpdate },
        ipAddress: req.ip
      });
      
      res.json(chats);
    } catch (error) {
      console.error('Error fetching chats:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤' });
    }
  });

  // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  app.get('/api/chats/:chatId/messages', isAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      const { chatId } = req.params;
      const limit = parseInt(req.query.limit as string) || 20;
      
      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –∏–∑ –±–∞–∑—ã
      const chat = await storage.getChatByIds(user.id, chatId);
      
      if (!chat) {
        return res.status(404).json({ message: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      let messages = await storage.listChatMessages(chat.id);
      let needsUpdate = false;
      
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å –≤ –±–∞–∑–µ, 
      // –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ MTProto API
      if (messages.length < limit) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —á–µ—Ä–µ–∑ MTProto API
          const { getChatHistory } = require('./telegram-auth');
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π peer –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã chatId
          let peer = null;
          
          // –†–∞–∑–±–∏—Ä–∞–µ–º chatId –Ω–∞ —á–∞—Å—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç: —Ç–∏–ø_id)
          const chatIdParts = chat.chatId.split('_');
          if (chatIdParts.length === 2) {
            const chatType = chatIdParts[0];
            const id = parseInt(chatIdParts[1]);
            
            if (!isNaN(id)) {
              if (chatType === 'user') {
                peer = { _: 'inputPeerUser', user_id: id, access_hash: 0 };
              } else if (chatType === 'chat') {
                peer = { _: 'inputPeerChat', chat_id: id };
              } else if (chatType === 'channel') {
                peer = { _: 'inputPeerChannel', channel_id: id, access_hash: 0 };
              }
            }
          }
          
          if (peer) {
            const historyResult = await getChatHistory(peer, limit);
            
            if (historyResult.success) {
              console.log(`Retrieved ${historyResult.messages.length} messages from Telegram API`);
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
              const savedMessages = [];
              
              for (const msg of historyResult.messages) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                if (msg._ === 'message' && msg.message) {
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                  let senderName = 'Unknown';
                  let senderId = '';
                  
                  if (msg.from_id && msg.from_id._ === 'peerUser') {
                    const userId = msg.from_id.user_id;
                    const sender = historyResult.users.find((u: any) => u.id === userId);
                    
                    if (sender) {
                      senderName = `${sender.first_name || ''} ${sender.last_name || ''}`.trim();
                      senderId = `user_${userId}`;
                    }
                  }
                  
                  // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                  const messageDate = new Date(msg.date * 1000);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º telegramId
                  const telegramMsgId = `${chat.chatId}_${msg.id}`;
                  const existingMessage = await storage.getMessageByTelegramId(telegramMsgId);
                  
                  if (!existingMessage) {
                    const newMessage = await storage.createMessage({
                      chatId: chat.id,
                      telegramId: telegramMsgId,
                      senderId: senderId,
                      senderName: senderName,
                      text: msg.message,
                      sentAt: messageDate,
                      isOutgoing: msg.out || false,
                      mediaType: msg.media ? msg.media._ : null,
                      mediaUrl: null // –ü–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞
                    });
                    
                    savedMessages.push(newMessage);
                  }
                }
              }
              
              if (savedMessages.length > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                if (savedMessages.length > 0) {
                  const latestMessage = savedMessages.reduce((latest, msg) => 
                    new Date(msg.sentAt) > new Date(latest.sentAt) ? msg : latest, 
                    savedMessages[0]
                  );
                  
                  await storage.updateChat(chat.id, {
                    lastMessageDate: latestMessage.sentAt,
                    lastMessageText: latestMessage.text
                  });
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = await storage.listChatMessages(chat.id);
                needsUpdate = true;
              }
            } else {
              console.error('Error from Telegram API:', historyResult.error);
            }
          } else {
            console.error('Could not parse chatId or create peer object');
          }
        } catch (error) {
          console.error('Error fetching messages from Telegram:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      await storage.createLog({
        userId: user.id,
        action: 'fetch_messages',
        details: { chatId, count: messages.length, updated: needsUpdate },
        ipAddress: req.ip
      });
      
      res.json(messages);
    } catch (error) {
      console.error('Error fetching messages:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π' });
    }
  });

  // 7. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  app.post('/api/auth/logout', isAuthenticated, async (req, res) => {
    try {
      const user = req.user as any;
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –≤—ã—Ö–æ–¥–µ
      await storage.createLog({
        userId: user.id,
        action: 'user_logout',
        details: { },
        ipAddress: req.ip
      });
      
      // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω
      const { sessionToken } = req.body;
      if (sessionToken) {
        await storage.deleteSession(sessionToken);
      }
      
      req.logout((err) => {
        if (err) {
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
        }
        
        req.session.destroy((err) => {
          if (err) {
            console.error('Session destruction error:', err);
          }
          res.json({ success: true });
        });
      });
    } catch (error) {
      console.error('Logout error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
    }
  });

  // === –ê–î–ú–ò–ù API ===
  
  // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  app.get('/api/admin/users', isAdmin, async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 20;
      const offset = parseInt(req.query.offset as string) || 0;
      
      const users = await storage.listUsers(limit, offset);
      const total = await storage.countUsers();
      
      res.json({
        users,
        pagination: {
          total,
          limit,
          offset
        }
      });
    } catch (error) {
      console.error('Admin users fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
  });

  // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  app.get('/api/admin/stats', isAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
      const [totalUsers, activeSessions, totalChats, apiRequests] = await Promise.all([
        storage.countUsers(),
        storage.countActiveSessions(),
        storage.countChats(),
        storage.countApiRequests()
      ]);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏
      const now = new Date();
      const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏
      const [recentUserLogs, recentSessionLogs, recentChatLogs, recentApiLogs] = await Promise.all([
        storage.listLogsByAction('user_registered', sevenDaysAgo),
        storage.listLogsByAction('session_created', oneDayAgo),
        storage.listLogsByAction('chat_created', 30),
        storage.listLogsByAction('api_request', thirtyDaysAgo)
      ]);
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const newUsers = recentUserLogs.length;
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const newSessions = recentSessionLogs.length;
      
      // –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤
      const usersDynamic = newUsers > 0 ? `+${newUsers} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π` : "–°—Ç–∞–±–∏–ª—å–Ω–æ";
      const sessionsDynamic = newSessions > 0 ? `+${newSessions} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞` : "–°—Ç–∞–±–∏–ª—å–Ω–æ";
      const chatsDynamic = "–°—Ç–∞–±–∏–ª—å–Ω–æ";
      const requestsDynamic = "-5% —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞"; // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      
      res.json({
        totalUsers,
        activeSessions,
        totalChats,
        apiRequests,
        usersDynamic,
        sessionsDynamic,
        chatsDynamic,
        requestsDynamic
      });
    } catch (error) {
      console.error('Admin stats fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
  });
  
  // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/admin/logs', isAdmin, async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 50;
      
      const logs = await storage.listLogs(limit);
      
      res.json(logs);
    } catch (error) {
      console.error('Admin logs fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã' });
    }
  });

  // 4. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post('/api/admin/users/:id/toggle-block', isAdmin, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const updatedUser = await storage.updateUser(userId, {
        isActive: !user.isActive
      });
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –¥–µ–π—Å—Ç–≤–∏–∏
      const adminUser = req.user as any;
      await storage.createLog({
        userId: adminUser.id,
        action: user.isActive ? 'user_blocked' : 'user_unblocked',
        details: { targetUserId: userId },
        ipAddress: req.ip
      });
      
      res.json(updatedUser);
    } catch (error) {
      console.error('Admin toggle block error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  });

  // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/admin/users/:id/sessions', isAdmin, async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const user = await storage.getUser(userId);
      
      if (!user) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      const sessions = await storage.listUserSessions(userId);
      
      res.json(sessions);
    } catch (error) {
      console.error('Admin sessions fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' });
    }
  });
  
  // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
  app.get('/api/admin/sessions', isAdmin, async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 20;
      const offset = parseInt(req.query.offset as string) || 0;
      
      const allSessions = await storage.listAllSessions(limit, offset);
      const totalSessions = await storage.countActiveSessions();
      
      res.json({
        sessions: allSessions,
        pagination: {
          total: totalSessions,
          limit,
          offset
        }
      });
    } catch (error) {
      console.error('Admin sessions fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π' });
    }
  });
  
  // 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  app.post('/api/admin/sessions/:token/terminate', isAdmin, async (req, res) => {
    try {
      const { token } = req.params;
      
      await storage.deleteSession(token);
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      const adminUser = (req as any).adminUser || req.user as any;
      
      if (adminUser) {
        await storage.createLog({
          userId: adminUser.id,
          action: 'session_terminated',
          details: { sessionToken: token },
          ipAddress: req.ip
        });
      }
      
      res.json({ success: true });
    } catch (error) {
      console.error('Admin terminate session error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' });
    }
  });
  
  // 8. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
  app.get('/api/admin/chats', isAdmin, async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 20;
      const offset = parseInt(req.query.offset as string) || 0;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const allChats = await storage.listAllChats(limit, offset);
      const totalChats = await storage.countChats();
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      const enrichedChats = await Promise.all(
        allChats.map(async (chat) => {
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          const chatMessages = await storage.listChatMessages(chat.id, 1000);
          
          return {
            ...chat,
            messagesCount: chatMessages.length
          };
        })
      );
      
      res.json({
        chats: enrichedChats,
        pagination: {
          total: totalChats,
          limit,
          offset
        }
      });
    } catch (error) {
      console.error('Admin chats fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤' });
    }
  });
  
  // 9. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
  app.get('/api/admin/chats/:id/messages', isAdmin, async (req, res) => {
    try {
      const chatId = parseInt(req.params.id);
      const limit = parseInt(req.query.limit as string) || 50;
      
      const messagesData = await storage.listChatMessages(chatId, limit);
      
      res.json(messagesData);
    } catch (error) {
      console.error('Admin chat messages fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞' });
    }
  });

  // 6. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é
  app.post('/api/admin/login', async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin –≤ –±–∞–∑–µ
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (username === 'admin' && password === 'admin') {
          const newAdmin = await storage.createUser({
            telegramId: 'admin',
            username: 'admin',
            firstName: 'Administrator',
            password: 'admin',
            isAdmin: true,
            lastLogin: new Date()
          });
          
          // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          const sessionToken = randomBytes(32).toString('hex');
          const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
          
          await storage.createSession({
            userId: newAdmin.id,
            sessionToken,
            ipAddress: req.ip || null,
            userAgent: req.headers['user-agent'] || null,
            expiresAt
          });
          
          await storage.createLog({
            userId: newAdmin.id,
            action: 'admin_created',
            details: { username },
            ipAddress: req.ip
          });
          
          return res.json({
            success: true,
            user: {
              id: newAdmin.id,
              username: newAdmin.username,
              isAdmin: newAdmin.isAdmin
            },
            sessionToken
          });
        }
        
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
      if (user.password !== password) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionToken = randomBytes(32).toString('hex');
      const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 1 –Ω–µ–¥–µ–ª—è
      
      await storage.createSession({
        userId: user.id,
        sessionToken,
        ipAddress: req.ip || null,
        userAgent: req.headers['user-agent'] || null,
        expiresAt
      });
      
      await storage.createLog({
        userId: user.id,
        action: 'admin_login',
        details: { username },
        ipAddress: req.ip
      });
      
      res.json({
        success: true,
        user: {
          id: user.id,
          username: user.username,
          isAdmin: user.isAdmin
        },
        sessionToken
      });
    } catch (error) {
      console.error('Admin login error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
    }
  });

  // 7. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  app.post('/api/admin/change-password', isAdmin, async (req, res) => {
    try {
      const { currentPassword, newPassword } = req.body;
      const user = req.user as any;
      
      if (!currentPassword || !newPassword) {
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const dbUser = await storage.getUser(user.id);
      
      if (!dbUser) {
        return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      if (dbUser.password !== currentPassword) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      await storage.updateUserPassword(user.id, newPassword);
      
      await storage.createLog({
        userId: user.id,
        action: 'admin_password_change',
        details: { },
        ipAddress: req.ip
      });
      
      res.json({ success: true });
    } catch (error) {
      console.error('Change password error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' });
    }
  });

  // 8. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/admin/settings', isAdmin, async (req, res) => {
    try {
      const settingsList = await storage.listSettings();
      res.json(settingsList);
    } catch (error) {
      console.error('Settings fetch error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
  });

  // 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  app.post('/api/admin/settings', isAdmin, async (req, res) => {
    try {
      const { key, value, description } = req.body;
      
      if (!key || value === undefined) {
        return res.status(400).json({ message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      if (key === 'telegram_bot_token') {
        const { updateBotToken } = await import('./telegram');
        const success = await updateBotToken(value);
        
        if (!success) {
          return res.status(400).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞' });
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1
        const userId = req.user ? (req.user as any).id : 1;
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
        await storage.createLog({
          userId: userId,
          action: 'bot_token_updated',
          details: { success },
          ipAddress: req.ip
        });
        
        return res.json({ key, value: '***HIDDEN***', description });
      }
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
      const setting = await storage.upsertSetting(key, value, description);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1
      const userId = req.user ? (req.user as any).id : 1;
      
      await storage.createLog({
        userId: userId,
        action: 'setting_update',
        details: { key, value },
        ipAddress: req.ip
      });
      
      res.json(setting);
    } catch (error) {
      console.error('Setting update error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' });
    }
  });
  
  // 10. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  app.post('/api/admin/send-test-notification', isAdmin, async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const notificationsEnabled = await storage.getSettingValue("notifications_enabled");
      const adminChatId = await storage.getSettingValue("admin_chat_id");
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (notificationsEnabled !== "true") {
        return res.status(400).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' });
      }
      
      if (!adminChatId) {
        return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
      }
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { sendTestNotification } = await import('./telegram');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const success = await sendTestNotification(adminChatId);
      
      if (success) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1
        const userId = req.user ? (req.user as any).id : 1;
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await storage.createLog({
          userId: userId,
          action: 'test_notification_sent',
          details: { adminChatId },
          ipAddress: req.ip
        });
        
        res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      }
    } catch (error) {
      console.error('Admin test notification error:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
  });
  
  // === –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ß–ï–†–ï–ó QR –ö–û–î ===
  
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞
  app.post('/api/auth/qr/create', async (req, res) => {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram API
      const result = await createQRLoginCode();
      
      if (!result.success) {
        return res.status(500).json({ 
          success: false,
          message: result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR –∫–æ–¥' 
        });
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ QR –∫–æ–¥–∞
      await storage.createLog({
        userId: null,
        action: 'qr_code_created',
        details: { token: result.token },
        ipAddress: req.ip
      });
      
      return res.status(200).json({
        success: true,
        token: result.token,
        url: result.url,
        expires: result.expires
      });
    } catch (error: any) {
      console.error('Error creating QR code:', error);
      res.status(500).json({ 
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–∞' 
      });
    }
  });
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ QR –∫–æ–¥—É
  app.post('/api/auth/qr/check', async (req, res) => {
    try {
      const { token } = qrTokenSchema.parse(req.body);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const result = await checkQRLoginStatus(token);
      
      if (result.success && result.user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ QR –∫–æ–¥
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        let user = await storage.getUserByTelegramId(result.user.id);
        
        if (!user) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          user = await storage.createUser({
            telegramId: result.user.id,
            username: result.user.username || `user_${result.user.id}`,
            firstName: result.user.firstName || '',
            lastName: result.user.lastName || '',
            phoneNumber: result.user.phone || '',
            isActive: true,
            role: 'user',
            createdAt: new Date()
          });
          
          // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await storage.createLog({
            userId: user.id,
            action: 'user_registered_qr',
            details: { telegramId: result.user.id },
            ipAddress: req.ip
          });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const sessionToken = randomBytes(48).toString('hex');
        const session = await storage.createSession({
          userId: user.id,
          token: sessionToken,
          ipAddress: req.ip || null,
          userAgent: req.headers['user-agent'] || null,
          expiresAt: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)) // 30 –¥–Ω–µ–π
        });
        
        // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        req.login(user, (err) => {
          if (err) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
          }
          
          // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          storage.createLog({
            userId: user.id,
            action: 'user_login_qr',
            details: { telegramId: result.user.id },
            ipAddress: req.ip
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          return res.status(200).json({
            success: true,
            user: {
              id: user.id,
              username: user.username,
              firstName: user.firstName,
              lastName: user.lastName,
              role: user.role,
              isAdmin: user.isAdmin
            },
            sessionToken
          });
        });
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
        return res.status(200).json({
          success: false,
          waiting: result.error === 'Waiting for QR code scan',
          message: result.error || '–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞'
        });
      }
    } catch (error: any) {
      console.error('Error checking QR login:', error);
      res.status(500).json({ 
        success: false,
        message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
      });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
  const httpServer = createServer(app);

  return httpServer;
}
