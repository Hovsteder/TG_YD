import { storage } from "./storage";
import { randomInt } from "crypto";
import { getBotInstance } from "./telegram";

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
interface VerificationData {
  code: string;
  expiresAt: Date;
  attempts: number;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–¥–æ–≤ (–±—É–¥–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
const verificationStore: Record<string, VerificationData> = {};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
export async function generateVerificationCode(phoneNumber: string): Promise<string> {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
  const code = randomInt(100000, 999999).toString();
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ 10 –º–∏–Ω—É—Ç
  const expiresAt = new Date(Date.now() + 10 * 60 * 1000);
  verificationStore[phoneNumber] = { 
    code, 
    expiresAt, 
    attempts: 0 
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const user = await storage.getUserByPhoneNumber(phoneNumber);
  if (user) {
    await storage.updateUser(user.id, { 
      verificationCode: code,
      verificationCodeExpires: expiresAt
    });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await storage.createLog({
      userId: user.id,
      action: "verification_code_sent",
      details: { phoneNumber },
      ipAddress: null
    });
  }
  
  console.log(`Generated verification code for ${phoneNumber}: ${code}`);
  
  return code;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
export function verifyCode(phoneNumber: string, code: string): boolean {
  const verificationData = verificationStore[phoneNumber];
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫
  if (!verificationData || new Date() > verificationData.expiresAt) {
    return false;
  }
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
  verificationData.attempts += 1;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
  const isValid = verificationData.code === code;
  
  // –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  if (isValid || verificationData.attempts >= 5) {
    delete verificationStore[phoneNumber];
  }
  
  return isValid;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
export async function sendVerificationSMS(phoneNumber: string, code: string): Promise<boolean> {
  try {
    // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`[SMS] Verification code for ${phoneNumber}: ${code}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const user = await storage.getUserByPhoneNumber(phoneNumber);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    try {
      const botInstance = await getBotInstance();
      
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const message = `
üì± *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞*

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: *${code}*

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.
      `.trim();
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –µ–≥–æ Telegram ID
      let codeSentToUser = false;
      
      if (user && user.telegramId && /^\d/.test(user.telegramId)) {
        try {
          await botInstance.api.sendMessage(user.telegramId, message, { parse_mode: "Markdown" });
          console.log(`Verification code sent directly to user: ${user.username || user.firstName} (${user.telegramId})`);
          codeSentToUser = true;
        } catch (err) {
          console.error(`Failed to send code to user ${user.id}:`, err);
        }
      }
      
      // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é,
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
      if (!codeSentToUser) {
        // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const adminChatId = await storage.getSettingValue("admin_chat_id");
        
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ—Å—Ç—å –∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
        if (adminChatId && !isNaN(Number(adminChatId))) {
          try {
            await botInstance.api.sendMessage(adminChatId, 
              `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥: ${code}`, 
              { parse_mode: "Markdown" });
            console.log(`Verification code sent to admin chat: ${adminChatId}`);
          } catch (err) {
            console.error("Failed to send code to admin chat:", err);
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å Telegram ID
          try {
            const allAdmins = await storage.listAdmins();
            let codeSent = false;
            
            for (const admin of allAdmins) {
              if (admin.telegramId && /^\d/.test(admin.telegramId)) {
                try {
                  await botInstance.api.sendMessage(admin.telegramId, 
                    `üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n–ù–æ–º–µ—Ä: ${phoneNumber}\n–ö–æ–¥: ${code}`);
                  codeSent = true;
                  console.log(`Verification code sent to admin: ${admin.username} (${admin.telegramId})`);
                } catch (err) {
                  console.error(`Failed to send code to admin ${admin.username}:`, err);
                }
              }
            }
            
            if (!codeSent) {
              console.log("Could not find any admin with valid Telegram ID. Code was not sent to Telegram.");
            }
          } catch (err) {
            console.error("Error while searching for admins:", err);
          }
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ –ª–æ–≥–∞—Ö, —á—Ç–æ –∫–æ–¥ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.log(`User with phone ${phoneNumber} doesn't have a linked Telegram account. Code sent to admin instead.`);
      }
      
      // –°—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      return true;
    } catch (error) {
      console.error("Error sending code via Telegram:", error);
      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —É—Å–ø–µ—à–Ω–æ
      // –¥–ª—è —Ü–µ–ª–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return true;
    }
  } catch (error) {
    console.error("Error in sendVerificationSMS:", error);
    return false;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤
export function cleanupExpiredCodes(): void {
  const now = new Date();
  for (const [phoneNumber, data] of Object.entries(verificationStore)) {
    if (now > data.expiresAt) {
      delete verificationStore[phoneNumber];
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(cleanupExpiredCodes, 10 * 60 * 1000);